{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,kBAAmBC,SAASC,cAAc,SAC1CC,gBAAiBF,SAASC,cAAc,yBACxCE,eAAgBH,SAASC,cAAc,wBACvCG,YAAaJ,SAASC,cAAc,2BAiBtC,SAASI,GAAQC,SAAEA,EAAQC,MAAEA,IAC3BC,EAAAZ,GAASa,OAAOC,QAAQ,uBAAqBJ,QAAiBC,M,CAGhE,SAASI,GAAML,SAAEA,EAAQC,MAAEA,IACzBC,EAAAZ,GAASa,OAAOG,QAAQ,sBAAoBN,QAAeC,M,CAG7D,SAASM,EAAcP,EAAUC,GAC/B,MAAMO,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEZ,E,MAAUC,IAEpBY,EAAO,C,SAAEb,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhCbT,EAAKC,kBAAkBsB,iBAAiB,UAExC,SAAsBC,GACpBA,EAAIC,iBACJ,MAAMrB,EAAkBsB,OAAO1B,EAAKI,gBAAgBuB,OAC9CtB,EAAiBqB,OAAO1B,EAAKK,eAAesB,OAC5CrB,EAAcoB,OAAO1B,EAAKM,YAAYqB,OAE5C,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAasB,GAAK,EAAE,CAEtCb,EAAea,EAAI,EADExB,EAAkBC,EAAiBuB,GACnBC,KAAKtB,GAASuB,MAAMjB,E","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  formCreatePromise: document.querySelector('.form'),\n  inputFirstDelay: document.querySelector('input[name = \"delay\"]'),\n  inputStepDelay: document.querySelector('input[name = \"step\"]'),\n  inputAmount: document.querySelector('input[name = \"amount\"]'),\n};\n\nrefs.formCreatePromise.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const inputFirstDelay = Number(refs.inputFirstDelay.value);\n  const inputStepDelay = Number(refs.inputStepDelay.value);\n  const inputAmount = Number(refs.inputAmount.value);\n  \n  for (let i = 0; i < inputAmount; i += 1){\n    const deleyCounter = inputFirstDelay + inputStepDelay * i;\n    createPromise((i + 1), deleyCounter).then(resolve).catch(error);\n  };\n};\n\nfunction resolve({ position, delay }) { \n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nfunction error({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((fulfill, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        fulfill({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n};\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formCreatePromise","document","querySelector","inputFirstDelay","inputStepDelay","inputAmount","$47d4ff9957288465$var$resolve","position","delay","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$error","failure","$47d4ff9957288465$var$createPromise","shouldResolve","Math","random","Promise","fulfill","reject","setTimeout","addEventListener","evt","preventDefault","Number","value","i","then","catch"],"version":3,"file":"03-promises.66362710.js.map"}