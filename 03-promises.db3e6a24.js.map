{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,kBAAmBC,SAASC,cAAc,SAC1CC,gBAAiBF,SAASC,cAAc,yBACxCE,eAAgBH,SAASC,cAAc,wBACvCG,YAAaJ,SAASC,cAAc,2BAiBtC,SAASI,EAAQC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC3BC,EAAAb,GAASc,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGxE,SAASK,EAAMP,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MACzBC,EAAAb,GAASc,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGrE,SAASO,EAAcR,EAAUC,GAC/B,IAAMQ,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEb,WAAUC,UAEpBa,EAAO,CAAEd,WAAUC,S,GAEpBA,E,IAhCPV,EAAKC,kBAAkBwB,iBAAiB,UAExC,SAAsBC,GACpBA,EAAIC,iBAKJ,IAJA,IAAMvB,EAAkBwB,OAAO5B,EAAKI,gBAAgByB,OAC9CxB,EAAiBuB,OAAO5B,EAAKK,eAAewB,OAC5CvB,EAAcsB,OAAO5B,EAAKM,YAAYuB,OAEnCC,EAAI,EAAGA,EAAIxB,EAAawB,GAAK,EAAE,CAEtCb,EAAea,EAAI,EADE1B,EAAkBC,EAAiByB,GACnBC,KAAKxB,GAASyB,MAAMjB,E","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  formCreatePromise: document.querySelector('.form'),\n  inputFirstDelay: document.querySelector('input[name = \"delay\"]'),\n  inputStepDelay: document.querySelector('input[name = \"step\"]'),\n  inputAmount: document.querySelector('input[name = \"amount\"]'),\n};\n\nrefs.formCreatePromise.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const inputFirstDelay = Number(refs.inputFirstDelay.value);\n  const inputStepDelay = Number(refs.inputStepDelay.value);\n  const inputAmount = Number(refs.inputAmount.value);\n  \n  for (let i = 0; i < inputAmount; i += 1){\n    const deleyCounter = inputFirstDelay + inputStepDelay * i;\n    createPromise((i + 1), deleyCounter).then(resolve).catch(error);\n  };\n};\n\nfunction resolve({ position, delay }) { \n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nfunction error({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((fulfill, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        fulfill({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n};\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formCreatePromise","document","querySelector","inputFirstDelay","inputStepDelay","inputAmount","$ce04d3a99e08e73b$var$resolve","param","position","delay","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$error","failure","$ce04d3a99e08e73b$var$createPromise","shouldResolve","Math","random","Promise","fulfill","reject","setTimeout","addEventListener","evt","preventDefault","Number","value","i","then","catch"],"version":3,"file":"03-promises.db3e6a24.js.map"}